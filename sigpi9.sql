-- MySQL Script generated by MySQL Workbench
-- 12/06/16 21:29:26
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SIGPI
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SIGPI` ;

-- -----------------------------------------------------
-- Schema SIGPI
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SIGPI` DEFAULT CHARACTER SET utf8 COLLATE utf8_spanish_ci ;
USE `SIGPI` ;

-- -----------------------------------------------------
-- Table `SIGPI`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Cliente` (
  `idCliente` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para cliente',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del cliente',
  `telefonoFijo` VARCHAR(45) NULL COMMENT 'Telefono fijo del cliente',
  `telefonoCelular` VARCHAR(45) NULL COMMENT 'Telefono celular del cliente',
  `correoElectronico` VARCHAR(45) NULL COMMENT 'Correo electronico del cliente',
  `nit` VARCHAR(45) NOT NULL COMMENT 'Codigo NIT del cliente',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idCliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SIGPI`.`EstadoProyecto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`EstadoProyecto` (
  `idEstadoProyecto` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para estado de proyecto',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del estado de proyecto',
  PRIMARY KEY (`idEstadoProyecto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SIGPI`.`Proyecto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Proyecto` (
  `idProyecto` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para proyecto',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del proyecto',
  `fechaInicio` DATE NULL COMMENT 'Fecha de inicio del proyecto',
  `fechaEntrega` DATE NULL COMMENT 'Fecha de entrega del proyecto',
  `porcentajeAvance` VARCHAR(45) NULL COMMENT 'Numero entre 1 y 100 que representa el porcentaje de avance del proyecto',
  `Cliente_idCliente` INT NOT NULL COMMENT 'Codigo que relaciona al proyecto con su respectivo cliente',
  `EstadoProyecto_idEstadoProyecto` INT NOT NULL COMMENT 'Codigo que relaciona al proyecto con el estado en que se encuentra',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idProyecto`, `Cliente_idCliente`, `EstadoProyecto_idEstadoProyecto`),
  CONSTRAINT `fk_Proyecto_Cliente1`
    FOREIGN KEY (`Cliente_idCliente`)
    REFERENCES `SIGPI`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Proyecto_EstadoProyecto1`
    FOREIGN KEY (`EstadoProyecto_idEstadoProyecto`)
    REFERENCES `SIGPI`.`EstadoProyecto` (`idEstadoProyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Proyecto_Cliente1_idx` ON `SIGPI`.`Proyecto` (`Cliente_idCliente` ASC);

CREATE INDEX `fk_Proyecto_EstadoProyecto1_idx` ON `SIGPI`.`Proyecto` (`EstadoProyecto_idEstadoProyecto` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Rol` (
  `idRol` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico de rol',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del rol',
  PRIMARY KEY (`idRol`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SIGPI`.`Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para usuario',
  `nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Nombre identificador unico para usuario',
  `contrasena` VARCHAR(45) NOT NULL COMMENT 'Contraseña del usuario',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idUsuario`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `nombreUsuario_UNIQUE` ON `SIGPI`.`Usuario` (`nombreUsuario` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Empleado` (
  `idEmpleado` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para empleado',
  `nombreCompleto` VARCHAR(45) NOT NULL COMMENT 'Nombres y apellidos del empleado',
  `documento` VARCHAR(45) NOT NULL COMMENT 'Numero de documento del empleado',
  `telefonoFijo` VARCHAR(45) NULL COMMENT 'Telefono fijo del empleado',
  `telefonoCelular` VARCHAR(45) NULL COMMENT 'Telefono celular del empleado',
  `correoElectronico` VARCHAR(45) NOT NULL COMMENT 'Correo electronico del empleado',
  `direccion` VARCHAR(45) NOT NULL COMMENT 'Direccion del lugar de residencia del empleado',
  `Rol_idRol` INT NOT NULL COMMENT 'Codigo que relaciona al empleado con un rol',
  `Usuario_idUsuario` INT NOT NULL COMMENT 'Codigo que relaciona al empleado con un usuario',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idEmpleado`, `Rol_idRol`, `Usuario_idUsuario`),
  CONSTRAINT `fk_Empleado_Rol1`
    FOREIGN KEY (`Rol_idRol`)
    REFERENCES `SIGPI`.`Rol` (`idRol`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Empleado_Usuario1`
    FOREIGN KEY (`Usuario_idUsuario`)
    REFERENCES `SIGPI`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Empleado_Rol1_idx` ON `SIGPI`.`Empleado` (`Rol_idRol` ASC);

CREATE INDEX `fk_Empleado_Usuario1_idx` ON `SIGPI`.`Empleado` (`Usuario_idUsuario` ASC);

CREATE UNIQUE INDEX `documento_UNIQUE` ON `SIGPI`.`Empleado` (`documento` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Plano`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Plano` (
  `idPlano` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico del plano',
  `Proyecto_idProyecto` INT NOT NULL COMMENT 'Codigo que relaciona al plano con el proyecto al que pertenece',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Descripcion del plano',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idPlano`, `Proyecto_idProyecto`),
  CONSTRAINT `fk_Plano_Proyecto1`
    FOREIGN KEY (`Proyecto_idProyecto`)
    REFERENCES `SIGPI`.`Proyecto` (`idProyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Plano_Proyecto1_idx` ON `SIGPI`.`Plano` (`Proyecto_idProyecto` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Informe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Informe` (
  `idArchivo` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo unico identificador del archivo',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'nombre del archivo',
  `tipoArchivo` VARCHAR(100) NOT NULL COMMENT 'Tipo de archivo (pdf)',
  `tamano` VARCHAR(45) NOT NULL COMMENT 'Tamañ del archivo en KB',
  `ruta` VARCHAR(100) NOT NULL COMMENT 'Ruta que da acceso al archivo',
  `Empleado_idEmpleado` INT NOT NULL COMMENT 'Codigo que relaciona al archivo con el empleado que lo agrego',
  `Proyecto_idProyecto` INT NOT NULL COMMENT 'Codigo que relaciona al archivo con el proyecto al que pertenece',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idArchivo`, `Empleado_idEmpleado`, `Proyecto_idProyecto`),
  CONSTRAINT `fk_Archivo_Empleado1`
    FOREIGN KEY (`Empleado_idEmpleado`)
    REFERENCES `SIGPI`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Archivo_Proyecto1`
    FOREIGN KEY (`Proyecto_idProyecto`)
    REFERENCES `SIGPI`.`Proyecto` (`idProyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Archivo_Empleado1_idx` ON `SIGPI`.`Informe` (`Empleado_idEmpleado` ASC);

CREATE INDEX `fk_Archivo_Proyecto1_idx` ON `SIGPI`.`Informe` (`Proyecto_idProyecto` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Material`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Material` (
  `idMaterial` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para material',
  `referencia` VARCHAR(45) NOT NULL COMMENT 'Referencia con la que el material es reconocido dentro de la empresa',
  `especificaciones` VARCHAR(45) NOT NULL COMMENT 'Dimensiones y otros detalles del material',
  `unidadMedida` VARCHAR(45) NOT NULL COMMENT 'Cadena de caracteres que indica la unidad de medida del material',
  `cantidadDisponible` DOUBLE NOT NULL COMMENT 'Cantidad disponible de material en el almacen',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idMaterial`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SIGPI`.`Orden`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Orden` (
  `idOrden` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico de la orden',
  `cantidadRequerida` DOUBLE NOT NULL COMMENT 'Cantidad de material requerido',
  `cantidadConsumida` DOUBLE NOT NULL COMMENT 'Cantidad de material consumido por la orden',
  `estado` TINYINT(1) NOT NULL COMMENT 'Indica si a la orden le asignaron los materiales (0= materiales no asignados, 1= materiales asignados)',
  `Material_idMaterial` INT NOT NULL COMMENT 'Codigo que relaciona la orden con el material que es requerido',
  `Plano_idPlano` INT NOT NULL COMMENT 'Codigo que relaciona la orden con el plano que la origino',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idOrden`, `Material_idMaterial`, `Plano_idPlano`),
  CONSTRAINT `fk_MaterialRequerido_Material1`
    FOREIGN KEY (`Material_idMaterial`)
    REFERENCES `SIGPI`.`Material` (`idMaterial`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MaterialRequerido_Plano1`
    FOREIGN KEY (`Plano_idPlano`)
    REFERENCES `SIGPI`.`Plano` (`idPlano`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_MaterialRequerido_Material1_idx` ON `SIGPI`.`Orden` (`Material_idMaterial` ASC);

CREATE INDEX `fk_MaterialRequerido_Plano1_idx` ON `SIGPI`.`Orden` (`Plano_idPlano` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Tramite`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Tramite` (
  `idTramite` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico para tramite',
  `fecha` DATE NOT NULL COMMENT 'Fecha en que se realizo el tramite',
  `cantidadAsignada` DOUBLE NOT NULL COMMENT 'Cantidad de material asignada en el tramite',
  `tipo` VARCHAR(45) NOT NULL COMMENT 'Cadena de caracteres que representa el tipo de tramite (entrada, salida, devolucion)',
  `Empleado_idEmpleado` INT NOT NULL COMMENT 'Codigo que relaciona al tramite con el empleado que lo ejecuto',
  `Material_idMaterial` INT NOT NULL COMMENT 'Codigo que relaciona al tramite con el material transferido',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idTramite`, `Empleado_idEmpleado`, `Material_idMaterial`),
  CONSTRAINT `fk_Tramite_Empleado1`
    FOREIGN KEY (`Empleado_idEmpleado`)
    REFERENCES `SIGPI`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Tramite_Material1`
    FOREIGN KEY (`Material_idMaterial`)
    REFERENCES `SIGPI`.`Material` (`idMaterial`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Tramite_Empleado1_idx` ON `SIGPI`.`Tramite` (`Empleado_idEmpleado` ASC);

CREATE INDEX `fk_Tramite_Material1_idx` ON `SIGPI`.`Tramite` (`Material_idMaterial` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`EquipoTrabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`EquipoTrabajo` (
  `Empleado_idEmpleado` INT NOT NULL COMMENT 'Codigo que relaciona al empleado con un equipo de trabajo',
  `Proyecto_idProyecto` INT NOT NULL COMMENT 'Codigo que relaciona al proyecto con un equipo de trabajo',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`Empleado_idEmpleado`, `Proyecto_idProyecto`),
  CONSTRAINT `fk_Empleado_has_Proyecto_Empleado1`
    FOREIGN KEY (`Empleado_idEmpleado`)
    REFERENCES `SIGPI`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Empleado_has_Proyecto_Proyecto1`
    FOREIGN KEY (`Proyecto_idProyecto`)
    REFERENCES `SIGPI`.`Proyecto` (`idProyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Empleado_has_Proyecto_Proyecto1_idx` ON `SIGPI`.`EquipoTrabajo` (`Proyecto_idProyecto` ASC);

CREATE INDEX `fk_Empleado_has_Proyecto_Empleado1_idx` ON `SIGPI`.`EquipoTrabajo` (`Empleado_idEmpleado` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`ArchivoPlano`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`ArchivoPlano` (
  `idArchivo` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico del plano',
  `tipoArchivo` VARCHAR(100) NOT NULL COMMENT 'Tipo de archivo (pdf)',
  `tamano` VARCHAR(45) NOT NULL COMMENT 'Tamaño del archivo en KB',
  `ruta` VARCHAR(100) NOT NULL COMMENT 'Ruta que da acceso al archivo',
  `Empleado_idEmpleado` INT NOT NULL COMMENT 'Codigo que relaciona al archivo con el empleado que lo agrego',
  `Plano_idPlano` INT NOT NULL COMMENT 'Codigo que relaciona al archivo con la entidad plano',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idArchivo`, `Empleado_idEmpleado`, `Plano_idPlano`),
  CONSTRAINT `fk_Archivo_Empleado10`
    FOREIGN KEY (`Empleado_idEmpleado`)
    REFERENCES `SIGPI`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ArchivoPlano_Plano1`
    FOREIGN KEY (`Plano_idPlano`)
    REFERENCES `SIGPI`.`Plano` (`idPlano`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Archivo_Empleado1_idx` ON `SIGPI`.`ArchivoPlano` (`Empleado_idEmpleado` ASC);

CREATE INDEX `fk_ArchivoPlano_Plano1_idx` ON `SIGPI`.`ArchivoPlano` (`Plano_idPlano` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`Proveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`Proveedor` (
  `idProveedor` INT NOT NULL AUTO_INCREMENT COMMENT 'Codigo identificador unico del proveedor',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre de la empresa proveedora',
  `asesor` VARCHAR(45) NOT NULL COMMENT 'Nombre del asesor que permite el contacto con el proveedor',
  `telefono` VARCHAR(45) NOT NULL COMMENT 'Telefono de contacto del asesor',
  `correoElectronico` VARCHAR(45) NOT NULL COMMENT 'Correo electronico del asesor',
  `direccion` VARCHAR(45) NOT NULL COMMENT 'Direccion del proveedor',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`idProveedor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SIGPI`.`DirectorioProveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`DirectorioProveedor` (
  `Material_idMaterial` INT NOT NULL COMMENT 'Codigo que relaciona al directorio con el material',
  `Proveedor_idProveedor` INT NOT NULL COMMENT 'Codigo que relaciona al directorio con el proveedor',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`Material_idMaterial`, `Proveedor_idProveedor`),
  CONSTRAINT `fk_Material_has_Proveedor_Material1`
    FOREIGN KEY (`Material_idMaterial`)
    REFERENCES `SIGPI`.`Material` (`idMaterial`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Material_has_Proveedor_Proveedor1`
    FOREIGN KEY (`Proveedor_idProveedor`)
    REFERENCES `SIGPI`.`Proveedor` (`idProveedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Material_has_Proveedor_Proveedor1_idx` ON `SIGPI`.`DirectorioProveedor` (`Proveedor_idProveedor` ASC);

CREATE INDEX `fk_Material_has_Proveedor_Material1_idx` ON `SIGPI`.`DirectorioProveedor` (`Material_idMaterial` ASC);


-- -----------------------------------------------------
-- Table `SIGPI`.`OrdenTramitada`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SIGPI`.`OrdenTramitada` (
  `Orden_idOrden` INT NOT NULL COMMENT 'Codigo que relaciona a la orden tramitada con una orden',
  `Tramite_idTramite` INT NOT NULL COMMENT 'Codigo que relaciona a la orden tramitada con un tramite',
  `visibilidad` TINYINT(1) NOT NULL COMMENT 'Indica si un registro es visible (1 visible, 0 no visible)',
  PRIMARY KEY (`Orden_idOrden`, `Tramite_idTramite`),
  CONSTRAINT `fk_OrdenTramitada_Orden1`
    FOREIGN KEY (`Orden_idOrden`)
    REFERENCES `SIGPI`.`Orden` (`idOrden`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OrdenTramitada_Tramite1`
    FOREIGN KEY (`Tramite_idTramite`)
    REFERENCES `SIGPI`.`Tramite` (`idTramite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_OrdenTramitada_Tramite1_idx` ON `SIGPI`.`OrdenTramitada` (`Tramite_idTramite` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
